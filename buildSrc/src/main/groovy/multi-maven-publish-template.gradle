import java.nio.charset.StandardCharsets
import java.nio.file.Files
import cn.hutool.json.JSONObject
import cn.hutool.json.JSONUtil
import cn.hutool.core.io.FileUtil
import com.fasterxml.jackson.dataformat.toml.TomlMapper
import cn.hutool.core.io.file.PathUtil
import com.vanniktech.maven.publish.SonatypeHost
import cn.hutool.setting.Setting
import cn.hutool.http.HttpUtil
import cn.hutool.core.date.LocalDateTimeUtil

import java.nio.file.StandardCopyOption


plugins {
    id('base')
    id("maven-publish")
    id("signing")
    id("java-library")
    id("com.vanniktech.maven.publish")
    id("com.github.hierynomus.license")
}

base {
    archivesName = getSubProjectName(project, rootProject)
}

def getSubProjectName(Project project, Project rootProject) {
    if (project == rootProject)
        return name
    else
        return  "${rootProject.name}-${name}"
}

@SuppressWarnings('GroovyAssignabilityCheck')
static def gitConfig(Project project) {
    return new Setting(project.rootProject.file(".git/config").absolutePath)
}

static def getApiGithubJson(Project project) {
    return JSONUtil.parseObj(HttpUtil.get( gitConfig(project).get("remote \"origin\"", "url")
            .replace(".git", "")
            .replace("https://github.com/", "https://api.github.com/repos/"), StandardCharsets.UTF_8))
}

static def getCreatedTime(Project project) {
    return LocalDateTimeUtil.parse(getApiGithubJson(project.rootProject).getStr("created_at").replace("Z", "+0000"), "yyyy-MM-dd'T'HH:mm:ssZ");
}

static def gitBranch(Project project) {
    return FileUtil.readUtf8String(project.rootProject.file(".git/HEAD")).replace("ref: refs/heads/", "").trim()
}

static def nullToCreate(Properties properties, java.nio.file.Path path, Action<Properties> action) {
    if (!Files.exists(path)) {
        action.execute(properties)
        def writer = Files.newBufferedWriter(path, StandardCharsets.UTF_8)
        properties.store(writer, "gradle.properties manager")
        writer.close()
    } else {
        def reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)
        properties.load(reader)
    }
    return properties
}

static def buildProperties(Project project) {
    return nullToCreate(new Properties(),getBuildProperties(project.rootProject), it -> {
        it.put("mavenGroup", "io.github.baka4n")
    })
}

static def getBuildProperties(Project rootProject) {
    return rootProject.file("gradle/ext/build.properties").toPath()
}

static def nullPut(Properties properties, String key, java.nio.file.Path path, Object value, String title) {
    if (!properties.containsKey(key)) {
        properties.put(key, value)
        def writer = Files.newBufferedWriter(path, StandardCharsets.UTF_8)
        properties.store(writer, title)

    }
    return properties.getProperty(key)
}

static def getKey(Project project, String appendKey) {
    if (project == project.rootProject)
        return "${project.name}.${appendKey}"
    else
        return "${project.rootProject.name}.${project.name}.${appendKey}"

}

static def getVersionKey(Project project) {
    return getKey(project,"version")
}
static def getDescriptionKey(Project project) {
    return getKey(project, "description")
}

static def copy(java.nio.file.Path path, java.nio.file.Path from) {
    if (Files.notExists(from)) {
        PathUtil.copyFile(from, path, StandardCopyOption.REPLACE_EXISTING)
    }
    return path
}


static def read(java.nio.file.Path file) {
    if (Files.exists(file)) {
        try(def reader = Files.newBufferedReader(file, StandardCharsets.UTF_8)) {
            def readTree = new TomlMapper().readTree(reader)
            return JSONUtil.parseObj(readTree.toPrettyString())
        }
    }
    return JSONUtil.createObj()
}

subprojects {
    apply plugin: "base"
    apply plugin: "maven-publish"
    apply plugin: "signing"
    apply plugin: "java-library"
    apply plugin: "com.vanniktech.maven.publish"
    base {
        archivesName = getSubProjectName(project, rootProject)
    }
}

def buildProperties = buildProperties(project)
def buildPath = getBuildProperties(rootProject)
def mavenToml = read(copy(file("maven.toml").toPath(), file("gradle/template.toml").toPath()))
def gitApiJson = getApiGithubJson(project)

def readme = rootProject.file("README.MD").toPath()
if (Files.notExists(readme)) {
    try(def bw = Files.newBufferedWriter(readme, StandardCharsets.UTF_8)) {
        bw.writeLine(gitApiJson.getStr("description"))
    }
}

def path = rootProject.file("LICENSE").toPath()
List<JSONObject> authors = (mavenToml.getJSONArray("authors") as List<JSONObject>)
def sb = new StringBuilder()
def iterator = authors.iterator()
if (iterator.hasNext()) {
    sb.append(iterator.next().getStr("id"))
}
while (iterator.hasNext()) {
    sb.append(", ").append(iterator.next().getStr("id"))
}
try(
        def writer = Files.newBufferedWriter(path, StandardCharsets.UTF_8)
        def reader = Files.newBufferedReader(rootProject.file("licenses/${mavenToml.getStr("license")}.template").toPath())
) {

    reader.lines().forEach {
        writer.writeLine(it.replace("<year>", (getCreatedTime(project).year + 3).toString()).replace("<authors>", sb.toString()))
    }
}


allprojects {

    project.group = buildProperties.getProperty("mavenGroup")
    project.version = nullPut(buildProperties, getVersionKey(project), buildPath, "1.0.0.0", "gradle.properties manager")
    project.description = nullPut(buildProperties, getDescriptionKey(project), buildPath, project.name, "gradle.properties manager")

    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url = "https://central.sonatype.com/api/v1/publisher/deployments/download/"
        }
    }

    signing {
        useGpgCmd()
        sign(publishing.publications)
    }

    mavenPublishing {
        publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL, true)
        coordinates(project.group.toString(), base.archivesName.get(), project.version.toString())
        signAllPublications()
        pom {
            name = base.archivesName.get()
            description = project.description
            inceptionYear = getCreatedTime(project).year.toString()
            url = gitApiJson.getStr("html_url")
            licenses {
                license {
                    name = mavenToml.getStr("license")
                    url = "${gitApiJson.getStr("svn_url")}/blob/${gitBranch(rootProject)}/LICENSE"
                    description = "${gitApiJson.getStr("svn_url")}/blob/${gitBranch(rootProject)}/LICENSE"
                }
            }
            developers {
                for (final JSONObject o in authors) {
                    developer {
                        id = o.getStr("id")
                        name = o.getStr("name")
                        url = o.getStr("url")
                    }
                }
            }
            scm {
                url = gitApiJson.getStr("html_url")
                connection = "scm:git:${gitApiJson.getStr("git_url")}"
                developerConnection = "scm:git:ssh://${gitApiJson.getStr("ssh_url")}"
            }
        }
    }
}